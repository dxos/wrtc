version: 2.1
orbs:
  node: circleci/node@5.0.2
  win: circleci/windows@4.1.1

executors:
  win-x86_64:
    machine:
      image: windows-default
    resource_class: windows.medium
  linux-x86_64: &linux-x86_64
    docker:
      - image: ubuntu:22.04
    environment:
      TARGET_ARCH: x86_64
      CMAKE_BUILD_TYPE: Release
      PLATFORM: linux
  linux-arm64: &linux-arm64
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    environment:
      TARGET_ARCH: arm64
      CMAKE_BUILD_TYPE: Release
      PLATFORM: linux
  macos: &macos
    macos:
      xcode: "14.0.0"
    environment:
      TARGET_ARCH: x86_64
      CMAKE_BUILD_TYPE: Release
      PLATFORM: darwin
  windows: &windows
    machine:
      image: 'windows-server-2019-vs2019:stable'
      resource_class: windows.medium
      shell: bash.exe

jobs:
  build:
    parameters:
      os:
        type: executor
      node-version:
        type: string
      release-type:
        type: string
    executor: << parameters.os >>
    working_directory: ~/node-webrtc
    steps:

      ###
      # SET TARGET_PLATFORM
      # - This is used for cache keys
      ###
      - when:
          condition:
            equal: [ *windows, << parameters.os >> ]
          steps:
            - run:
                name: Configure target platform (Windows)
                command: |
                  echo 'export TARGET_PLATFORM="windows"' >> $BASH_ENV
      - when:
          condition:
            equal: [ *macos, << parameters.os >> ]
          steps:
            - run:
                name: Configure target platform (macOS)
                command: |
                  echo 'export TARGET_PLATFORM="macos"' >> $BASH_ENV
      - when:
          condition:
            or:
              - equal: [ *linux-x86_64, << parameters.os >> ]
              - equal: [ *linux-arm64, << parameters.os >> ]
          steps:
            - run:
                name: Configure target platform (Linux)
                command: |
                  echo 'export TARGET_PLATFORM="linux"' >> $BASH_ENV
      
      ###
      # CONFIGURE DEBUG BUILDS
      ###

      - when:
          condition:
            equal: [ "Debug", << parameters.release-type >> ]
          steps:
            - run:
                name: Configure debug build
                command: |
                  echo 'export CMAKE_BUILD_TYPE="Debug"' >> $BASH_ENV
                  echo 'export DEBUG="true"' >> $BASH_ENV
      
      ###
      # MACOS SPECIFIC SETUP
      ###
      
      - when:
          condition:
            equal: [ *macos, << parameters.os >> ]
          steps:
            - run:
                name: Install CMake and Python2 via Homebrew
                command: brew install cmake kamilturek/python2/python@2
        
      ###
      # WINDOWS SPECIFIC SETUP
      ###
      
      - when:
          condition:
            equal: [ *windows, << parameters.os >> ]
          steps:
            - run:
                name: Install CMake, Python, Windows 10 SDK
                command: |
                  choco install -y cmake python windows-sdk-10-version-2004-all --no-progress
                  cp /c/tools/miniconda3/python.exe /c/tools/miniconda3/python3.exe # gn depends on python3 alias

      ###
      # LINUX SPECIFIC SETUP
      ###

      - when:
          condition:
            or:
              - equal: [ *linux-x86_64, << parameters.os >> ]
              - equal: [ *linux-arm64, << parameters.os >> ]
          steps:
            - run:
                name: "Install sudo if required (to unify ARM and Docker builds)"
                command: |
                  if ! which sudo &>/dev/null; then
                    apt update && apt install sudo
                  fi
            - run: 
                name: Install platform dependencies via Apt and Pip
                command: |
                  sudo apt update && sudo apt install cmake build-essential curl git python2 python3-pkg-resources libglib2.0-dev clang libc++-dev libc++abi-dev -y
                  sudo ln -s `which python2` /usr/local/bin/python
                  set -x
                  gcc --version
                  g++ --version
                  cmake --version

      ###
      # MAIN SETUP
      ###
      - node/install:
          node-version: << parameters.node-version >>
      - checkout
      - run:
          name: Build environment
          command: |
            env
      - run:
          name: Before restore cache...
          command: |
            echo >>CACHE_KEY "TARGET_ARCH=$TARGET_ARCH"
            echo >>CACHE_KEY "CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE"
            echo >>CACHE_KEY "TARGET_PLATFORM=$TARGET_PLATFORM"
            cat CACHE_KEY
      - restore_cache:
          name: Restore cached libwebrtc build
          key: asset-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "CMakeLists.txt" }}
      - restore_cache:
          name: Restore cached NPM modules
          key: modules-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "package.json" }}
      - run:
          name: npm install
          command: |
            export PARALLELISM=2 # Reduce PARALLELISM during the build; otherwise, we run out of memory.
            export TAR_OPTIONS=--no-same-owner # This fixes up some odd behavior when untar-ing as root.
            export SKIP_DOWNLOAD=true # Do not use prebuilt binaries
            export PATH="$PATH:/c/Program Files/CMake/bin:/c/Program Files/Git/usr/bin:/c/Program Files/Git/mingw64/libexec/git-core" # Needed for Windows
            export PATH="$PATH:/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64"
            npm install

            # TODO
            # if [[ "$TARGET_ARCH" != arm* ]]; then
            #   npm run install-example
            # fi
      - save_cache:
          name: Cache NPM modules
          key: modules-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Build libwebrtc + Node.js bindings
          command: npm run build:native
      - save_cache:
          key: asset-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "CMakeLists.txt" }}
          paths:
            - build/external
      - run: npm run build
      # - run:
      #     name: Before save workspace...
      #     command: |
      #       mkdir -p /tmp/workspace/$PLATFORM-$TARGET_ARCH-$CMAKE_BUILD_TYPE
      #       cd /tmp/workspace/$PLATFORM-$TARGET_ARCH-$CMAKE_BUILD_TYPE

      #       cp ~/node-webrtc/build/$CMAKE_BUILD_TYPE/wrtc.node wrtc.node
      #       #cp -R ~/node-webrtc/example example || true # TODO
      #       cp -R ~/node-webrtc/node_modules node_modules
      #       cp -R ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm-sysroot debian_sid_arm-sysroot || true
      #       cp -R ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm64-sysroot debian_sid_arm64-sysroot || true

      # - persist_to_workspace:
      #     root: /tmp/workspace
      #     paths:
      #       - "*"
      - run:
          name: Run Unit and Integration Tests
          command: |
            # NOTE(mroberts): We run a reduced set of tests for ARM since some of
            # them fail (and I'm not sure all the reasons why, yet).
            export NODE_VERSION=$(node -v | tr -d '\n')
            if [[ "$TARGET_ARCH" == arm64 ]]; then
              qemu-aarch64 -L ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm64-sysroot ~/node-$NODE_VERSION-linux-arm64/bin/node test/create-offer.js
            else
              # NOTE(mroberts): First run C++ tests, if any.
              node dist/nodejs/test/cpp-test.js

              export CHECK_REFLEXIVE=true
              npm test

              # TODO
              # cd example
              # npm test
            fi
        
      ###
      # WEB PLATFORM TESTS
      ###
      - run:
          name: Setup /etc/hosts for Web Platform Tests (x86_64-only)
          command: |
            cat ci/wpt-hosts >>/etc/hosts
      - run:
          name: Run Web Platform Tests (x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            if [[ "$(uname)" == Linux ]]; then
              sudo apt install --reinstall python-pkg-resources
              #pip install --upgrade requests
            fi

            npm run wpt:init
            npm run wpt:test
      
      ###
      # RUN BROWSER TESTS (linux only for now)
      ###

      - when:
          condition:
            or:
              - equal: [ *linux-x86_64, << parameters.os >> ]
              - equal: [ *linux-arm64, << parameters.os >> ]
          steps:
            - run:
                name: Install Chrome and Firefox (x86_64-only)
                command: |
                  if [[ "$TARGET_ARCH" == arm* ]]; then
                    echo "Skipping..."
                    exit 0
                  fi

                  sudo apt install -y \
                    gconf-service \
                    libasound2 \
                    libatk1.0-0 \
                    libatk-bridge2.0-0 \
                    libc6 \
                    libcairo2 \
                    libcups2 \
                    libdbus-1-3 \
                    libexpat1 \
                    libfontconfig1 \
                    libgcc1 \
                    libgconf-2-4 \
                    libgdk-pixbuf2.0-0 \
                    libglib2.0-0 \
                    libgtk-3-0 \
                    libnspr4 \
                    libpango-1.0-0 \
                    libpangocairo-1.0-0 \
                    libstdc++6 \
                    libx11-6 \
                    libx11-xcb1 \
                    libxcb1 \
                    libxcomposite1 \
                    libxcursor1 \
                    libxdamage1 \
                    libxext6 \
                    libxfixes3 \
                    libxi6 \
                    libxrandr2 \
                    libxrender1 \
                    libxss1 \
                    libxtst6 \
                    ca-certificates \
                    fonts-liberation \
                    libappindicator1 \
                    libnss3 \
                    lsb-release \
                    xdg-utils \
                    wget
                  cd node_modules/travis-multirunner
                  export BVER=stable
                  BROWSER=chrome ./setup.sh
                  BROWSER=firefox ./setup.sh
                  echo >> $BASH_ENV export CHROME_BIN=$(pwd)/browsers/bin/chrome-$BVER
                  echo >> $BASH_ENV export FIREFOX_BIN=$(pwd)/browsers/bin/firefox-$BVER
      - run:
          name: Test Browsers (Linux x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            npm run test:browsers
      ###
      # TEST ELECTRON ON ALL PLATFORMS
      ###
      - run:
          name: Test Electron (x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            npm install --no-save electron@4.x
            if [[ "$(uname)" == Linux ]]; then
              sudo apt install -y xvfb
              xvfb-run ./node_modules/.bin/electron test/electron --no-sandbox
            else
              npm run test:electron
            fi

            npm install --no-save electron@5.x
            if [[ "$(uname)" == Linux ]]; then
              xvfb-run ./node_modules/.bin/electron test/electron --no-sandbox
            else
              npm run test:electron
            fi
      - run: # TODO: use conditionals and  such
          name: Publish Binary (arm64-, x86_64-only)
          command: |
            if [[ `git show -s --format=%B $CIRCLE_SHA1` == *'[publish binary]'* ]]; then
              npm run publish-binary
            else
              echo "Skipping..."
            fi

workflows:
  version: 2
  build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [win-x86_64, linux-x86_64, linux-arm64, macos]
              node-version: ["18.12.1"]
              release-type: ["Debug", "Release"]
